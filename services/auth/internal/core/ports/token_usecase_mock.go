// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-messanger/services/auth/internal/core/ports (interfaces: TokenUseCase)
//
// Generated by this command:
//
//	mockgen -destination=token_usecase_mock.go -package=ports github.com/popeskul/awesome-messanger/services/auth/internal/core/ports TokenUseCase
//

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenUseCase is a mock of TokenUseCase interface.
type MockTokenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUseCaseMockRecorder
}

// MockTokenUseCaseMockRecorder is the mock recorder for MockTokenUseCase.
type MockTokenUseCaseMockRecorder struct {
	mock *MockTokenUseCase
}

// NewMockTokenUseCase creates a new mock instance.
func NewMockTokenUseCase(ctrl *gomock.Controller) *MockTokenUseCase {
	mock := &MockTokenUseCase{ctrl: ctrl}
	mock.recorder = &MockTokenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUseCase) EXPECT() *MockTokenUseCaseMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenUseCase) GenerateToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenUseCaseMockRecorder) GenerateToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenUseCase)(nil).GenerateToken), arg0)
}

// ValidateToken mocks base method.
func (m *MockTokenUseCase) ValidateToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenUseCaseMockRecorder) ValidateToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenUseCase)(nil).ValidateToken), arg0)
}
