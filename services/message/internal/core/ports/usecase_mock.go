// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-messanger/services/message/internal/core/ports (interfaces: MessageUseCase)
//
// Generated by this command:
//
//	mockgen -destination=usecase_mock.go -package=ports github.com/popeskul/awesome-messanger/services/message/internal/core/ports MessageUseCase
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/popeskul/awesome-messanger/services/message/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageUseCase is a mock of MessageUseCase interface.
type MockMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUseCaseMockRecorder
}

// MockMessageUseCaseMockRecorder is the mock recorder for MockMessageUseCase.
type MockMessageUseCaseMockRecorder struct {
	mock *MockMessageUseCase
}

// NewMockMessageUseCase creates a new mock instance.
func NewMockMessageUseCase(ctrl *gomock.Controller) *MockMessageUseCase {
	mock := &MockMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUseCase) EXPECT() *MockMessageUseCaseMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockMessageUseCase) GetMessages(arg0 context.Context, arg1 *domain.GetMessagesRequest) (*domain.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", arg0, arg1)
	ret0, _ := ret[0].(*domain.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessageUseCaseMockRecorder) GetMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageUseCase)(nil).GetMessages), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockMessageUseCase) SendMessage(arg0 context.Context, arg1 *domain.SendMessageRequest) (*domain.SendMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(*domain.SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageUseCaseMockRecorder) SendMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageUseCase)(nil).SendMessage), arg0, arg1)
}

// StreamMessages mocks base method.
func (m *MockMessageUseCase) StreamMessages(arg0 context.Context, arg1 *domain.StreamMessagesRequest) (<-chan *domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamMessages", arg0, arg1)
	ret0, _ := ret[0].(<-chan *domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMessages indicates an expected call of StreamMessages.
func (mr *MockMessageUseCaseMockRecorder) StreamMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMessages", reflect.TypeOf((*MockMessageUseCase)(nil).StreamMessages), arg0, arg1)
}
