{
  "swagger": "2.0",
  "info": {
    "title": "api/message/message_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MessageService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/health": {
      "get": {
        "summary": "Check performs a general health check.",
        "operationId": "HealthService_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/healthz": {
      "get": {
        "summary": "Healthz is a legacy endpoint for health checks.",
        "operationId": "HealthService_Healthz",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/liveness": {
      "get": {
        "summary": "Liveness checks if the service is alive.",
        "operationId": "HealthService_Liveness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/readiness": {
      "get": {
        "summary": "Readiness checks if the service is ready to serve traffic.",
        "operationId": "HealthService_Readiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/messages": {
      "post": {
        "summary": "SendMessage sends a new message.",
        "operationId": "MessageService_SendMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/messageSendMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "SendMessageRequest is the request message for the SendMessage RPC.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/messageSendMessageRequest"
            }
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/messages/{chat_id}": {
      "get": {
        "summary": "GetMessages retrieves messages from a chat.",
        "operationId": "MessageService_GetMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/messageGetMessagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "chat_id",
            "description": "chat_id is the ID of the chat to retrieve messages from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "limit is the maximum number of messages to retrieve.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "before_timestamp",
            "description": "before_timestamp allows fetching messages before a certain time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    }
  },
  "definitions": {
    "healthHealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/healthHealthStatus",
          "description": "status is the health status of the service."
        }
      },
      "description": "HealthCheckResponse is the response message for health check RPCs."
    },
    "healthHealthStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "HEALTHY",
        "UNHEALTHY",
        "ALIVE",
        "READY"
      ],
      "default": "UNKNOWN",
      "description": "HealthStatus is the status of the service."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "messageGetMessagesResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/messageMessage"
          },
          "description": "messages is a list of messages from the chat."
        },
        "has_more": {
          "type": "boolean",
          "description": "has_more indicates if there are more messages to fetch."
        }
      },
      "description": "GetMessagesResponse is the response message for the GetMessages RPC."
    },
    "messageMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the unique identifier for the message."
        },
        "chat_id": {
          "type": "string",
          "description": "chat_id is the ID of the chat this message belongs to."
        },
        "sender_id": {
          "type": "string",
          "description": "sender_id is the ID of the sender of the message."
        },
        "content": {
          "type": "string",
          "description": "content is the content of the message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "timestamp is the time when the message was sent."
        }
      },
      "description": "Message represents a single message in a chat."
    },
    "messageSendMessageRequest": {
      "type": "object",
      "properties": {
        "chat_id": {
          "type": "string",
          "description": "chat_id is the ID of the chat to send the message to."
        },
        "sender_id": {
          "type": "string",
          "description": "sender_id is the ID of the message sender."
        },
        "content": {
          "type": "string",
          "description": "content is the content of the message."
        }
      },
      "description": "SendMessageRequest is the request message for the SendMessage RPC.",
      "required": [
        "chat_id",
        "sender_id",
        "content"
      ]
    },
    "messageSendMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/messageMessage",
          "description": "message is the sent message with server-assigned fields (like timestamp)."
        }
      },
      "description": "SendMessageResponse is the response message for the SendMessage RPC."
    }
  },
  "securityDefinitions": null
}
