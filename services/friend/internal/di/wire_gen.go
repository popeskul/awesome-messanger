// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/go-playground/validator/v10"
	"github.com/popeskul/awesome-messanger/services/friend/internal/adapters/http/server"
	"github.com/popeskul/awesome-messanger/services/friend/internal/adapters/logger"
	"github.com/popeskul/awesome-messanger/services/friend/internal/app"
	"github.com/popeskul/awesome-messanger/services/friend/internal/config"
	"github.com/popeskul/awesome-messanger/services/friend/internal/delivery/http"
	"github.com/popeskul/awesome-messanger/services/friend/internal/swagger"
	"github.com/popeskul/awesome-messanger/services/friend/internal/usecases"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeApp() (*app.App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	zapLogger, err := provideZapLogger()
	if err != nil {
		return nil, err
	}
	loggerZapLogger := logger.NewZapLogger(zapLogger)
	useCases := usecases.NewUseCases(loggerZapLogger)
	validate := validator.New()
	handlerFriends := http.NewHandler(useCases, validate)
	serverServer := server.NewServer(configConfig, handlerFriends, loggerZapLogger)
	swaggerServer := swagger.NewSwaggerServer(configConfig, loggerZapLogger)
	appApp := app.NewApp(configConfig, loggerZapLogger, serverServer, swaggerServer)
	return appApp, nil
}

// wire.go:

func provideZapLogger() (*zap.Logger, error) {
	return zap.NewProduction()
}
