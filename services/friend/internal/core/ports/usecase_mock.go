// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-messanger/services/friend/internal/core/ports (interfaces: FriendUseCase)
//
// Generated by this command:
//
//	mockgen -destination=usecase_mock.go -package=ports github.com/popeskul/awesome-messanger/services/friend/internal/core/ports FriendUseCase
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	models "github.com/popeskul/awesome-messanger/services/friend/internal/core/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFriendUseCase is a mock of FriendUseCase interface.
type MockFriendUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFriendUseCaseMockRecorder
}

// MockFriendUseCaseMockRecorder is the mock recorder for MockFriendUseCase.
type MockFriendUseCaseMockRecorder struct {
	mock *MockFriendUseCase
}

// NewMockFriendUseCase creates a new mock instance.
func NewMockFriendUseCase(ctrl *gomock.Controller) *MockFriendUseCase {
	mock := &MockFriendUseCase{ctrl: ctrl}
	mock.recorder = &MockFriendUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendUseCase) EXPECT() *MockFriendUseCaseMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *MockFriendUseCase) AddFriend(arg0 context.Context, arg1 *models.Friend) (*models.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", arg0, arg1)
	ret0, _ := ret[0].(*models.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockFriendUseCaseMockRecorder) AddFriend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockFriendUseCase)(nil).AddFriend), arg0, arg1)
}

// GetFriends mocks base method.
func (m *MockFriendUseCase) GetFriends(arg0 context.Context) ([]*models.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", arg0)
	ret0, _ := ret[0].([]*models.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendUseCaseMockRecorder) GetFriends(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriendUseCase)(nil).GetFriends), arg0)
}

// RespondToFriendRequest mocks base method.
func (m *MockFriendUseCase) RespondToFriendRequest(arg0 context.Context, arg1 *models.Friend) (*models.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToFriendRequest", arg0, arg1)
	ret0, _ := ret[0].(*models.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToFriendRequest indicates an expected call of RespondToFriendRequest.
func (mr *MockFriendUseCaseMockRecorder) RespondToFriendRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToFriendRequest", reflect.TypeOf((*MockFriendUseCase)(nil).RespondToFriendRequest), arg0, arg1)
}
