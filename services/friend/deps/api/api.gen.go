// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for FriendRequestResponseResponse.
const (
	Accepted FriendRequestResponseResponse = "accepted"
	Rejected FriendRequestResponseResponse = "rejected"
)

// Friend defines model for Friend.
type Friend struct {
	// FriendId ID of the friend
	FriendId string `json:"friendId"`

	// UserId ID of the user
	UserId string `json:"userId"`
}

// FriendRequest defines model for FriendRequest.
type FriendRequest struct {
	// FriendId ID of the friend to add
	FriendId string `json:"friendId"`

	// UserId ID of the user sending the friend request
	UserId string `json:"userId"`
}

// FriendRequestResponse defines model for FriendRequestResponse.
type FriendRequestResponse struct {
	// FriendId ID of the friend
	FriendId string `json:"friendId"`

	// Response Response to the friend request
	Response FriendRequestResponseResponse `json:"response"`
}

// FriendRequestResponseResponse Response to the friend request
type FriendRequestResponseResponse string

// GetFriendsParams defines parameters for GetFriends.
type GetFriendsParams struct {
	UserId string `form:"userId" json:"userId"`
}

// PostAddFriendJSONRequestBody defines body for PostAddFriend for application/json ContentType.
type PostAddFriendJSONRequestBody = FriendRequest

// PostRespondFriendRequestJSONRequestBody defines body for PostRespondFriendRequest for application/json ContentType.
type PostRespondFriendRequestJSONRequestBody = FriendRequestResponse

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send a friend request
	// (POST /add-friend)
	PostAddFriend(w http.ResponseWriter, r *http.Request)
	// Retrieve the friend list for the authenticated user
	// (GET /friends)
	GetFriends(w http.ResponseWriter, r *http.Request, params GetFriendsParams)
	// Health check for service liveness
	// (GET /live)
	GetLive(w http.ResponseWriter, r *http.Request)
	// Health check for service readiness
	// (GET /ready)
	GetReady(w http.ResponseWriter, r *http.Request)
	// Respond to a friend request
	// (POST /respond-friend-request)
	PostRespondFriendRequest(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Send a friend request
// (POST /add-friend)
func (_ Unimplemented) PostAddFriend(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve the friend list for the authenticated user
// (GET /friends)
func (_ Unimplemented) GetFriends(w http.ResponseWriter, r *http.Request, params GetFriendsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check for service liveness
// (GET /live)
func (_ Unimplemented) GetLive(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check for service readiness
// (GET /ready)
func (_ Unimplemented) GetReady(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Respond to a friend request
// (POST /respond-friend-request)
func (_ Unimplemented) PostRespondFriendRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAddFriend operation middleware
func (siw *ServerInterfaceWrapper) PostAddFriend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAddFriend(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFriends operation middleware
func (siw *ServerInterfaceWrapper) GetFriends(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFriendsParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFriends(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLive operation middleware
func (siw *ServerInterfaceWrapper) GetLive(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLive(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetReady operation middleware
func (siw *ServerInterfaceWrapper) GetReady(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReady(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRespondFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) PostRespondFriendRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRespondFriendRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/add-friend", wrapper.PostAddFriend)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/friends", wrapper.GetFriends)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/live", wrapper.GetLive)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ready", wrapper.GetReady)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/respond-friend-request", wrapper.PostRespondFriendRequest)
	})

	return r
}

type PostAddFriendRequestObject struct {
	Body *PostAddFriendJSONRequestBody
}

type PostAddFriendResponseObject interface {
	VisitPostAddFriendResponse(w http.ResponseWriter) error
}

type PostAddFriend200Response struct {
}

func (response PostAddFriend200Response) VisitPostAddFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAddFriend400Response struct {
}

func (response PostAddFriend400Response) VisitPostAddFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostAddFriend500Response struct {
}

func (response PostAddFriend500Response) VisitPostAddFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetFriendsRequestObject struct {
	Params GetFriendsParams
}

type GetFriendsResponseObject interface {
	VisitGetFriendsResponse(w http.ResponseWriter) error
}

type GetFriends200JSONResponse []Friend

func (response GetFriends200JSONResponse) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFriends400Response struct {
}

func (response GetFriends400Response) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetFriends500Response struct {
}

func (response GetFriends500Response) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetLiveRequestObject struct {
}

type GetLiveResponseObject interface {
	VisitGetLiveResponse(w http.ResponseWriter) error
}

type GetLive200Response struct {
}

func (response GetLive200Response) VisitGetLiveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetLive500Response struct {
}

func (response GetLive500Response) VisitGetLiveResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetReadyRequestObject struct {
}

type GetReadyResponseObject interface {
	VisitGetReadyResponse(w http.ResponseWriter) error
}

type GetReady200Response struct {
}

func (response GetReady200Response) VisitGetReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetReady500Response struct {
}

func (response GetReady500Response) VisitGetReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRespondFriendRequestRequestObject struct {
	Body *PostRespondFriendRequestJSONRequestBody
}

type PostRespondFriendRequestResponseObject interface {
	VisitPostRespondFriendRequestResponse(w http.ResponseWriter) error
}

type PostRespondFriendRequest200Response struct {
}

func (response PostRespondFriendRequest200Response) VisitPostRespondFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRespondFriendRequest400Response struct {
}

func (response PostRespondFriendRequest400Response) VisitPostRespondFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostRespondFriendRequest500Response struct {
}

func (response PostRespondFriendRequest500Response) VisitPostRespondFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Send a friend request
	// (POST /add-friend)
	PostAddFriend(ctx context.Context, request PostAddFriendRequestObject) (PostAddFriendResponseObject, error)
	// Retrieve the friend list for the authenticated user
	// (GET /friends)
	GetFriends(ctx context.Context, request GetFriendsRequestObject) (GetFriendsResponseObject, error)
	// Health check for service liveness
	// (GET /live)
	GetLive(ctx context.Context, request GetLiveRequestObject) (GetLiveResponseObject, error)
	// Health check for service readiness
	// (GET /ready)
	GetReady(ctx context.Context, request GetReadyRequestObject) (GetReadyResponseObject, error)
	// Respond to a friend request
	// (POST /respond-friend-request)
	PostRespondFriendRequest(ctx context.Context, request PostRespondFriendRequestRequestObject) (PostRespondFriendRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAddFriend operation middleware
func (sh *strictHandler) PostAddFriend(w http.ResponseWriter, r *http.Request) {
	var request PostAddFriendRequestObject

	var body PostAddFriendJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddFriend(ctx, request.(PostAddFriendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddFriend")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAddFriendResponseObject); ok {
		if err := validResponse.VisitPostAddFriendResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFriends operation middleware
func (sh *strictHandler) GetFriends(w http.ResponseWriter, r *http.Request, params GetFriendsParams) {
	var request GetFriendsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFriends(ctx, request.(GetFriendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFriends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFriendsResponseObject); ok {
		if err := validResponse.VisitGetFriendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLive operation middleware
func (sh *strictHandler) GetLive(w http.ResponseWriter, r *http.Request) {
	var request GetLiveRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLive(ctx, request.(GetLiveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLive")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLiveResponseObject); ok {
		if err := validResponse.VisitGetLiveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReady operation middleware
func (sh *strictHandler) GetReady(w http.ResponseWriter, r *http.Request) {
	var request GetReadyRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReady(ctx, request.(GetReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReady")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReadyResponseObject); ok {
		if err := validResponse.VisitGetReadyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRespondFriendRequest operation middleware
func (sh *strictHandler) PostRespondFriendRequest(w http.ResponseWriter, r *http.Request) {
	var request PostRespondFriendRequestRequestObject

	var body PostRespondFriendRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRespondFriendRequest(ctx, request.(PostRespondFriendRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRespondFriendRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRespondFriendRequestResponseObject); ok {
		if err := validResponse.VisitPostRespondFriendRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
