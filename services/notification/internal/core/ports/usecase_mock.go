// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-messanger/services/notification/internal/core/ports (interfaces: NotificationUseCase)
//
// Generated by this command:
//
//	mockgen -destination=usecase_mock.go -package=ports github.com/popeskul/awesome-messanger/services/notification/internal/core/ports NotificationUseCase
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/popeskul/awesome-messanger/services/notification/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationUseCase is a mock of NotificationUseCase interface.
type MockNotificationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationUseCaseMockRecorder
}

// MockNotificationUseCaseMockRecorder is the mock recorder for MockNotificationUseCase.
type MockNotificationUseCaseMockRecorder struct {
	mock *MockNotificationUseCase
}

// NewMockNotificationUseCase creates a new mock instance.
func NewMockNotificationUseCase(ctrl *gomock.Controller) *MockNotificationUseCase {
	mock := &MockNotificationUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationUseCase) EXPECT() *MockNotificationUseCaseMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockNotificationUseCase) SendNotification(arg0 context.Context, arg1 *domain.SendNotificationRequest) (*domain.SendNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1)
	ret0, _ := ret[0].(*domain.SendNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationUseCaseMockRecorder) SendNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationUseCase)(nil).SendNotification), arg0, arg1)
}
